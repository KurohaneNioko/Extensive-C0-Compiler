＜加法运算符＞ ::= +｜-
＜乘法运算符＞  ::= *｜/
＜关系运算符＞  ::=  <｜<=｜>｜>=｜!=｜==
＜字母＞   ::= _｜a｜．．．｜z｜A｜．．．｜Z
＜数字＞   ::= ０｜１｜．．．｜９
＜无符号整数＞  ::= ＜数字＞｛＜数字＞｝
＜整数＞        ::= ［＋｜－］＜无符号整数＞
＜字符＞    ::=  '＜加法运算符＞'｜'＜乘法运算符＞'｜'＜字母＞'｜'＜数字＞'
＜字符串＞   ::=  "｛十进制编码为32,33,35-126的ASCII字符｝"
＜标识符＞    ::=  ＜字母＞｛＜字母＞｜＜数字＞｝
↑ok

＜程序＞    ::= {const＜常量定义＞;}{＜变量定义＞;}{＜有返回值函数定义＞|＜无返回值函数定义＞}＜主函数＞
	head = 			const | 		int | char | 	int | char |		void				| void
				{const＜常量定义＞;}{(int|char)＜标识符＞['['＜无符号整数＞']']{<连续变量定义>};}
					const			(int|char)iden( '[' | , | ; )
								{(int|char|void)＜标识符＞('('<有参数函数定义片段> | '{'<无参数函数定义片段>)}void main <主函数片段>
									(int|char)iden( '(' | '{')
	搞一个 bool in_func_def; true时不能进入变量定义分支

ok<无参数函数定义片段> ::= ＜复合语句＞'}'					//标识符和返回值类型传进去
ok<有参数函数定义片段> ::= ＜参数表＞')' '{'＜复合语句＞'}'
ok<主函数片段> ::= '('')''{'＜复合语句＞'}'
ok<连续变量定义> ::= ,(＜标识符＞|＜标识符＞'['＜无符号整数＞']')


ok＜常量定义＞   ::=   int＜标识符＞＝＜整数＞{,＜标识符＞＝＜整数＞} | char＜标识符＞＝＜字符＞{,＜标识符＞＝＜字符＞}
	head = int | char
ok＜变量定义＞  ::= (int | char)(＜标识符＞|＜标识符＞'['＜无符号整数＞']'){<连续变量定义>}  //＜无符号整数＞表示数组元素的个数，其值需大于0
	head = int | char 
ok＜复合语句＞   ::=  {const＜常量定义＞;}{＜变量定义＞;}＜语句列＞
	
ok＜参数表＞    ::=  (int | char)＜标识符＞{,(int | char)＜标识符＞}

＜表达式＞    ::= ［＋｜－］＜项＞{＜加法运算符＞＜项＞}  //[+|-]只作用于第一个<项>
＜项＞     ::= ＜因子＞{＜乘法运算符＞＜因子＞}
＜因子＞    ::= ＜标识符＞｜＜标识符＞'['＜表达式＞']'|'('＜表达式＞')'｜＜整数＞|＜字符＞｜＜有返回值函数调用语句＞
＜语句＞    ::= ＜条件语句＞｜＜循环语句＞| '{'＜语句列＞'}'| ＜有返回值函数调用语句＞; |＜无返回值函数调用语句＞;｜＜赋值语句＞;｜＜读语句＞;｜＜写语句＞;｜＜空＞;|＜返回语句＞;
					if		   while | for		{							 		iden(func)				  iden(var)		scanf		  printf	  直接;		return
＜赋值语句＞   ::=  (＜标识符＞|＜标识符＞'['＜表达式＞']') =＜表达式＞
＜条件语句＞::= if '('＜条件＞')'＜语句＞[else＜语句＞]
＜条件＞    ::=  ＜表达式＞＜关系运算符＞＜表达式＞｜＜表达式＞ //表达式为0条件为假，否则为真
＜循环语句＞   ::=  (while '('＜条件＞')' |for'('＜标识符＞＝＜表达式＞;＜条件＞;＜标识符＞＝＜标识符＞(+|-)＜无符号整数＞')') ＜语句＞
＜有返回值函数调用语句＞ ::= ＜标识符＞'('＜值参数表＞')'|<标识符> 		//第一种选择为有参数的情况，第二种选择为无参数的情况
＜无返回值函数调用语句＞ ::= ＜标识符＞'('＜值参数表＞')'|<标识符>		//第一种选择为有参数的情况，第二种选择为无参数的情况
＜值参数表＞   ::= ＜表达式＞{,＜表达式＞}
ok＜语句列＞   ::= ｛＜语句＞｝		//0-inf个语句

＜读语句＞    ::=  scanf '('＜标识符＞{,＜标识符＞}')'
＜写语句＞    ::= printf'(' (＜字符串＞,＜表达式＞ | ＜字符串＞ | ＜表达式＞) ')'
＜返回语句＞   ::=  return['('＜表达式＞')']  

附加说明：
（1）char类型的变量或常量，用字符的ASCII码对应的整数参加运算
（2）标识符不区分大小写字母
（3）写语句中，字符串原样输出，单个字符类型的变量或常量输出字符，其他表达式按整型输出 
（4）数组的下标从0开始
（5）for语句先执行一次循环体中的语句再进行循环变量是否越界的测试

读语句不允许读到数组 是ojbk的


＜有返回值函数定义＞  ::=  (int | char)＜标识符＞('('＜参数表＞')' '{'＜复合语句＞'}'|'{'＜复合语句＞'}')  //第一种选择为有参数的情况，第二种选择为无参数的情况
	head = int | char 
＜无返回值函数定义＞  ::= void＜标识符＞('('＜参数表＞')' '{'＜复合语句＞'}'| {'＜复合语句＞'}')//第一种选择为有参数的情况，第二种选择为无参数的情况
	head = void
＜常量说明＞ ::=  const＜常量定义＞;{ const＜常量定义＞;}
	head = const
＜变量说明＞  ::= ＜变量定义＞;{＜变量定义＞;}
	head = int | char 

symbol table design:
name -> string
class -> INT CHA FUN
type -> CONST VAR ARRAY
length -> (INT|CHA -> 1) (ARRAY -> 1,2,3,4...)