1 CONST_SYM			const
2 INT_SYM			int
3 IDEN			zero
4 ASSIGN			=
5 UNSGN_INT			0
6 SEMICOLON			;
7 CONST_SYM			const
8 INT_SYM			int
9 IDEN			one
10 ASSIGN			=
11 UNSGN_INT			1
12 COMMA			,
13 IDEN			minus_two
14 ASSIGN			=
15 SUB			-
16 UNSGN_INT			2
17 SEMICOLON			;
18 CONST_SYM			const
19 CHAR_SYM			char
20 IDEN			renn
21 ASSIGN			=
22 SGL_CHARA			'0'
23 SEMICOLON			;
24 CONST_SYM			const
25 CHAR_SYM			char
26 IDEN			first_alpha
27 ASSIGN			=
28 SGL_CHARA			'a'
29 COMMA			,
30 IDEN			first_captical
31 ASSIGN			=
32 SGL_CHARA			'A'
33 SEMICOLON			;
34 INT_SYM			int
35 IDEN			x
36 SEMICOLON			;
37 UNKNOWN			!
38 INT_SYM			int
39 IDEN			fact
40 L_SMALL			(
41 INT_SYM			int
42 IDEN			t
43 R_SMALL			)
44 L_BIG			{
45 CONST_SYM			const
46 INT_SYM			int
47 IDEN			zero
48 ASSIGN			=
49 UNSGN_INT			1
50 SEMICOLON			;
51 PRINTF_SYM			printf
52 L_SMALL			(
53 IDEN			zero
54 R_SMALL			)
55 SEMICOLON			;
56 IF_SYM			if
57 L_SMALL			(
58 IDEN			t
59 LESS			<
60 UNSGN_INT			3
61 R_SMALL			)
62 RET_SYM			return
63 L_SMALL			(
64 IDEN			t
65 R_SMALL			)
66 SEMICOLON			;
67 ELSE_SYM			else
68 RET_SYM			return
69 L_SMALL			(
70 IDEN			fact
71 L_SMALL			(
72 IDEN			t
73 SUB			-
74 UNSGN_INT			1
75 R_SMALL			)
76 MUL			*
77 IDEN			t
78 R_SMALL			)
79 SEMICOLON			;
80 R_BIG			}
81 INT_SYM			int
82 IDEN			rt15
83 L_BIG			{
84 RET_SYM			return
85 L_SMALL			(
86 UNSGN_INT			3
87 MUL			*
88 UNSGN_INT			5
89 R_SMALL			)
90 SEMICOLON			;
91 R_BIG			}
92 VOID_SYM			void
93 IDEN			fun2
94 L_BIG			{
95 PRINTF_SYM			printf
96 L_SMALL			(
97 STRING			"114514"
98 R_SMALL			)
99 SEMICOLON			;
100 RET_SYM			return
101 SEMICOLON			;
102 R_BIG			}
103 VOID_SYM			void
104 MAIN_SYM			main
105 L_SMALL			(
106 R_SMALL			)
107 L_BIG			{
108 CONST_SYM			const
109 INT_SYM			int
110 IDEN			b
111 ASSIGN			=
112 ADD			+
113 UNSGN_INT			1
114 COMMA			,
115 IDEN			c
116 ASSIGN			=
117 UNSGN_INT			2
118 COMMA			,
119 IDEN			d
120 ASSIGN			=
121 UNSGN_INT			3
122 COMMA			,
123 IDEN			e
124 ASSIGN			=
125 UNSGN_INT			4
126 SEMICOLON			;
127 CHAR_SYM			char
128 IDEN			ar
129 L_MID			[
130 UNSGN_INT			2
131 R_MID			]
132 SEMICOLON			;
133 INT_SYM			int
134 IDEN			r
135 COMMA			,
136 IDEN			m1
137 L_MID			[
138 UNSGN_INT			8
139 R_MID			]
140 SEMICOLON			;
141 INT_SYM			int
142 IDEN			aa
143 COMMA			,
144 IDEN			a
145 SEMICOLON			;
146 IDEN			x
147 ASSIGN			=
148 SUB			-
149 UNSGN_INT			1
150 SEMICOLON			;
151 IDEN			r
152 ASSIGN			=
153 SUB			-
154 UNSGN_INT			4
155 SEMICOLON			;
156 IDEN			aa
157 ASSIGN			=
158 UNSGN_INT			6
159 SEMICOLON			;
160 PRINTF_SYM			printf
161 L_SMALL			(
162 STRING			"!@#$%%abcdABCD963287~;: "
163 COMMA			,
164 IDEN			aa
165 R_SMALL			)
166 SEMICOLON			;
167 PRINTF_SYM			printf
168 L_SMALL			(
169 IDEN			fact
170 L_SMALL			(
171 IDEN			aa
172 R_SMALL			)
173 R_SMALL			)
174 SEMICOLON			;
175 IDEN			fun2
176 SEMICOLON			;
177 IDEN			ar
178 L_MID			[
179 UNSGN_INT			1
180 R_MID			]
181 ASSIGN			=
182 SGL_CHARA			'0'
183 ADD			+
184 IDEN			rt15
185 SEMICOLON			;
186 IDEN			aa
187 ASSIGN			=
188 SUB			-
189 IDEN			b
190 MUL			*
191 IDEN			ar
192 L_MID			[
193 UNSGN_INT			1
194 R_MID			]
195 ADD			+
196 L_SMALL			(
197 IDEN			c
198 SUB			-
199 IDEN			e
200 MUL			*
201 UNSGN_INT			9
202 R_SMALL			)
203 ADD			+
204 UNSGN_INT			2
205 MUL			*
206 SGL_CHARA			'm'
207 SEMICOLON			;
208 PRINTF_SYM			printf
209 L_SMALL			(
210 IDEN			aa
211 R_SMALL			)
212 SEMICOLON			;
213 IDEN			a
214 ASSIGN			=
215 IDEN			aa
216 SEMICOLON			;
217 SCANF_SYM			scanf
218 L_SMALL			(
219 IDEN			a
220 COMMA			,
221 IDEN			x
222 R_SMALL			)
223 SEMICOLON			;
224 IF_SYM			if
225 L_SMALL			(
226 IDEN			a
227 GREATER			>
228 UNSGN_INT			0
229 R_SMALL			)
230 L_BIG			{
231 PRINTF_SYM			printf
232 L_SMALL			(
233 STRING			"1 hit "
234 R_SMALL			)
235 SEMICOLON			;
236 IF_SYM			if
237 L_SMALL			(
238 IDEN			x
239 LES_EQL			<=
240 UNSGN_INT			0
241 R_SMALL			)
242 L_BIG			{
243 IDEN			r
244 ASSIGN			=
245 IDEN			a
246 DIV			/
247 IDEN			x
248 MUL			*
249 IDEN			a
250 SEMICOLON			;
251 PRINTF_SYM			printf
252 L_SMALL			(
253 STRING			"2 hit "
254 R_SMALL			)
255 SEMICOLON			;
256 R_BIG			}
257 IDEN			r
258 ASSIGN			=
259 IDEN			r
260 ADD			+
261 IDEN			aa
262 SEMICOLON			;
263 R_BIG			}
264 IF_SYM			if
265 L_SMALL			(
266 IDEN			x
267 NOT_EQL			!=
268 UNSGN_INT			0
269 R_SMALL			)
270 L_BIG			{
271 PRINTF_SYM			printf
272 L_SMALL			(
273 STRING			"3 hit "
274 R_SMALL			)
275 SEMICOLON			;
276 IF_SYM			if
277 L_SMALL			(
278 IDEN			a
279 EQUAL			==
280 SUB			-
281 UNSGN_INT			4
282 R_SMALL			)
283 L_BIG			{
284 IDEN			r
285 ASSIGN			=
286 IDEN			r
287 ADD			+
288 UNSGN_INT			1
289 SEMICOLON			;
290 PRINTF_SYM			printf
291 L_SMALL			(
292 STRING			"4 hit "
293 R_SMALL			)
294 SEMICOLON			;
295 R_BIG			}
296 R_BIG			}
297 IF_SYM			if
298 L_SMALL			(
299 IDEN			a
300 LESS			<
301 UNSGN_INT			0
302 R_SMALL			)
303 L_BIG			{
304 PRINTF_SYM			printf
305 L_SMALL			(
306 STRING			"5 hit "
307 R_SMALL			)
308 SEMICOLON			;
309 IF_SYM			if
310 L_SMALL			(
311 IDEN			x
312 GRT_EQL			>=
313 UNSGN_INT			0
314 R_SMALL			)
315 L_BIG			{
316 IDEN			r
317 ASSIGN			=
318 IDEN			r
319 ADD			+
320 IDEN			a
321 SEMICOLON			;
322 PRINTF_SYM			printf
323 L_SMALL			(
324 STRING			"6 hit "
325 R_SMALL			)
326 SEMICOLON			;
327 R_BIG			}
328 R_BIG			}
329 ELSE_SYM			else
330 L_BIG			{
331 IDEN			r
332 ASSIGN			=
333 IDEN			r
334 MUL			*
335 SUB			-
336 UNSGN_INT			1
337 SEMICOLON			;
338 PRINTF_SYM			printf
339 L_SMALL			(
340 IDEN			r
341 R_SMALL			)
342 SEMICOLON			;
343 R_BIG			}
344 FOR_SYM			for
345 L_SMALL			(
346 IDEN			a
347 ASSIGN			=
348 SUB			-
349 UNSGN_INT			2
350 SEMICOLON			;
351 IDEN			a
352 LESS			<
353 IDEN			d
354 SEMICOLON			;
355 IDEN			a
356 ASSIGN			=
357 IDEN			a
358 ADD			+
359 UNSGN_INT			1
360 R_SMALL			)
361 L_BIG			{
362 IDEN			x
363 ASSIGN			=
364 IDEN			x
365 ADD			+
366 IDEN			e
367 SEMICOLON			;
368 R_BIG			}
369 WHILE_SYM			while
370 L_SMALL			(
371 IDEN			x
372 GREATER			>
373 UNSGN_INT			0
374 R_SMALL			)
375 L_BIG			{
376 IDEN			x
377 ASSIGN			=
378 IDEN			x
379 SUB			-
380 IDEN			c
381 SEMICOLON			;
382 R_BIG			}
383 PRINTF_SYM			printf
384 L_SMALL			(
385 IDEN			x
386 R_SMALL			)
387 SEMICOLON			;
388 R_BIG			}
