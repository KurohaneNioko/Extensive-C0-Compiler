1 CONST_SYM			const
2 INT_SYM			int
3 IDEN			zero
4 ASSIGN			=
5 UNSGN_INT			0
6 SEMICOLON			;
7 CONST_SYM			const
8 INT_SYM			int
9 IDEN			one
10 ASSIGN			=
11 UNSGN_INT			1
12 COMMA			,
13 IDEN			minus_two
14 ASSIGN			=
15 SUB			-
16 UNSGN_INT			2
17 SEMICOLON			;
18 CONST_SYM			const
19 CHAR_SYM			char
20 IDEN			renn
21 ASSIGN			=
22 SGL_CHARA			'0'
23 SEMICOLON			;
24 CONST_SYM			const
25 CHAR_SYM			char
26 IDEN			first_alpha
27 ASSIGN			=
28 SGL_CHARA			'a'
29 COMMA			,
30 IDEN			first_captical
31 ASSIGN			=
32 SGL_CHARA			'A'
33 SEMICOLON			;
34 INT_SYM			int
35 IDEN			x
36 SEMICOLON			;
37 INT_SYM			int
38 IDEN			fact
39 L_SMALL			(
40 INT_SYM			int
41 IDEN			t
42 R_SMALL			)
43 L_BIG			{
44 CONST_SYM			const
45 INT_SYM			int
46 IDEN			zero
47 ASSIGN			=
48 UNSGN_INT			1
49 SEMICOLON			;
50 PRINTF_SYM			printf
51 L_SMALL			(
52 IDEN			zero
53 R_SMALL			)
54 SEMICOLON			;
55 IF_SYM			if
56 L_SMALL			(
57 IDEN			t
58 LESS			<
59 UNSGN_INT			3
60 R_SMALL			)
61 RET_SYM			return
62 L_SMALL			(
63 IDEN			t
64 R_SMALL			)
65 SEMICOLON			;
66 ELSE_SYM			else
67 RET_SYM			return
68 L_SMALL			(
69 IDEN			fact
70 L_SMALL			(
71 IDEN			t
72 SUB			-
73 UNSGN_INT			1
74 R_SMALL			)
75 MUL			*
76 IDEN			t
77 R_SMALL			)
78 SEMICOLON			;
79 R_BIG			}
80 INT_SYM			int
81 IDEN			rt15
82 L_BIG			{
83 RET_SYM			return
84 L_SMALL			(
85 UNSGN_INT			3
86 MUL			*
87 UNSGN_INT			5
88 R_SMALL			)
89 SEMICOLON			;
90 R_BIG			}
91 VOID_SYM			void
92 IDEN			fun2
93 L_BIG			{
94 PRINTF_SYM			printf
95 L_SMALL			(
96 STRING			"114514"
97 R_SMALL			)
98 SEMICOLON			;
99 RET_SYM			return
100 SEMICOLON			;
101 R_BIG			}
102 VOID_SYM			void
103 MAIN_SYM			main
104 L_SMALL			(
105 R_SMALL			)
106 L_BIG			{
107 CONST_SYM			const
108 INT_SYM			int
109 IDEN			b
110 ASSIGN			=
111 ADD			+
112 UNSGN_INT			1
113 COMMA			,
114 IDEN			c
115 ASSIGN			=
116 UNSGN_INT			2
117 COMMA			,
118 IDEN			d
119 ASSIGN			=
120 UNSGN_INT			3
121 COMMA			,
122 IDEN			e
123 ASSIGN			=
124 UNSGN_INT			4
125 SEMICOLON			;
126 CHAR_SYM			char
127 IDEN			ar
128 L_MID			[
129 UNSGN_INT			2
130 R_MID			]
131 SEMICOLON			;
132 INT_SYM			int
133 IDEN			r
134 COMMA			,
135 IDEN			m1
136 L_MID			[
137 UNSGN_INT			8
138 R_MID			]
139 SEMICOLON			;
140 INT_SYM			int
141 IDEN			aa
142 COMMA			,
143 IDEN			a
144 SEMICOLON			;
145 IDEN			x
146 ASSIGN			=
147 SUB			-
148 UNSGN_INT			1
149 SEMICOLON			;
150 IDEN			r
151 ASSIGN			=
152 SUB			-
153 UNSGN_INT			4
154 SEMICOLON			;
155 IDEN			aa
156 ASSIGN			=
157 UNSGN_INT			6
158 SEMICOLON			;
159 PRINTF_SYM			printf
160 L_SMALL			(
161 STRING			"!@#$%%abcdABCD963287~;: "
162 COMMA			,
163 IDEN			aa
164 R_SMALL			)
165 SEMICOLON			;
166 PRINTF_SYM			printf
167 L_SMALL			(
168 IDEN			fact
169 L_SMALL			(
170 IDEN			aa
171 R_SMALL			)
172 R_SMALL			)
173 SEMICOLON			;
174 IDEN			fun2
175 SEMICOLON			;
176 IDEN			ar
177 L_MID			[
178 UNSGN_INT			1
179 R_MID			]
180 ASSIGN			=
181 SGL_CHARA			'0'
182 ADD			+
183 IDEN			rt15
184 SEMICOLON			;
185 IDEN			aa
186 ASSIGN			=
187 SUB			-
188 IDEN			b
189 MUL			*
190 IDEN			ar
191 L_MID			[
192 UNSGN_INT			1
193 R_MID			]
194 ADD			+
195 L_SMALL			(
196 IDEN			c
197 SUB			-
198 IDEN			e
199 MUL			*
200 UNSGN_INT			9
201 R_SMALL			)
202 ADD			+
203 UNSGN_INT			2
204 MUL			*
205 SGL_CHARA			'm'
206 SEMICOLON			;
207 PRINTF_SYM			printf
208 L_SMALL			(
209 IDEN			aa
210 R_SMALL			)
211 SEMICOLON			;
212 IDEN			a
213 ASSIGN			=
214 IDEN			aa
215 SEMICOLON			;
216 SCANF_SYM			scanf
217 L_SMALL			(
218 IDEN			a
219 COMMA			,
220 IDEN			x
221 R_SMALL			)
222 SEMICOLON			;
223 IF_SYM			if
224 L_SMALL			(
225 IDEN			a
226 GREATER			>
227 UNSGN_INT			0
228 R_SMALL			)
229 L_BIG			{
230 PRINTF_SYM			printf
231 L_SMALL			(
232 STRING			"1 hit "
233 R_SMALL			)
234 SEMICOLON			;
235 IF_SYM			if
236 L_SMALL			(
237 IDEN			x
238 LES_EQL			<=
239 UNSGN_INT			0
240 R_SMALL			)
241 L_BIG			{
242 IDEN			r
243 ASSIGN			=
244 IDEN			a
245 DIV			/
246 IDEN			x
247 MUL			*
248 IDEN			a
249 SEMICOLON			;
250 PRINTF_SYM			printf
251 L_SMALL			(
252 STRING			"2 hit "
253 R_SMALL			)
254 SEMICOLON			;
255 R_BIG			}
256 IDEN			r
257 ASSIGN			=
258 IDEN			r
259 ADD			+
260 IDEN			aa
261 SEMICOLON			;
262 R_BIG			}
263 IF_SYM			if
264 L_SMALL			(
265 IDEN			x
266 NOT_EQL			!=
267 UNSGN_INT			0
268 R_SMALL			)
269 L_BIG			{
270 PRINTF_SYM			printf
271 L_SMALL			(
272 STRING			"3 hit "
273 R_SMALL			)
274 SEMICOLON			;
275 IF_SYM			if
276 L_SMALL			(
277 IDEN			a
278 EQUAL			==
279 SUB			-
280 UNSGN_INT			4
281 R_SMALL			)
282 L_BIG			{
283 IDEN			r
284 ASSIGN			=
285 IDEN			r
286 ADD			+
287 UNSGN_INT			1
288 SEMICOLON			;
289 PRINTF_SYM			printf
290 L_SMALL			(
291 STRING			"4 hit "
292 R_SMALL			)
293 SEMICOLON			;
294 R_BIG			}
295 R_BIG			}
296 IF_SYM			if
297 L_SMALL			(
298 IDEN			a
299 LESS			<
300 UNSGN_INT			0
301 R_SMALL			)
302 L_BIG			{
303 PRINTF_SYM			printf
304 L_SMALL			(
305 STRING			"5 hit "
306 R_SMALL			)
307 SEMICOLON			;
308 IF_SYM			if
309 L_SMALL			(
310 IDEN			x
311 GRT_EQL			>=
312 UNSGN_INT			0
313 R_SMALL			)
314 L_BIG			{
315 IDEN			r
316 ASSIGN			=
317 IDEN			r
318 ADD			+
319 IDEN			a
320 SEMICOLON			;
321 PRINTF_SYM			printf
322 L_SMALL			(
323 STRING			"6 hit "
324 R_SMALL			)
325 SEMICOLON			;
326 R_BIG			}
327 R_BIG			}
328 ELSE_SYM			else
329 L_BIG			{
330 IDEN			r
331 ASSIGN			=
332 IDEN			r
333 MUL			*
334 SUB			-
335 UNSGN_INT			1
336 SEMICOLON			;
337 PRINTF_SYM			printf
338 L_SMALL			(
339 IDEN			r
340 R_SMALL			)
341 SEMICOLON			;
342 R_BIG			}
343 FOR_SYM			for
344 L_SMALL			(
345 IDEN			a
346 ASSIGN			=
347 SUB			-
348 UNSGN_INT			2
349 SEMICOLON			;
350 IDEN			a
351 LESS			<
352 IDEN			d
353 SEMICOLON			;
354 IDEN			a
355 ASSIGN			=
356 IDEN			a
357 ADD			+
358 UNSGN_INT			1
359 R_SMALL			)
360 L_BIG			{
361 IDEN			x
362 ASSIGN			=
363 IDEN			x
364 ADD			+
365 IDEN			e
366 SEMICOLON			;
367 R_BIG			}
368 WHILE_SYM			while
369 L_SMALL			(
370 IDEN			x
371 GREATER			>
372 UNSGN_INT			0
373 R_SMALL			)
374 L_BIG			{
375 IDEN			x
376 ASSIGN			=
377 IDEN			x
378 SUB			-
379 IDEN			c
380 SEMICOLON			;
381 R_BIG			}
382 PRINTF_SYM			printf
383 L_SMALL			(
384 IDEN			x
385 R_SMALL			)
386 SEMICOLON			;
387 R_BIG			}
